{
  "version": 3,
  "sources": ["../../../src/Models/Clientes.schema.ts", "../../../src/utils/GetElements.ts", "../../../src/pages/Clientes.ts"],
  "sourcesContent": ["import type * as Z from 'zod';\r\nconst z = window.Zod;\r\n\r\nexport const ClienteSchema = z.object({\r\n  nombre: z.string().min(2, \"Nombre demasiado corto.\").max(50, \"Nombre demasiado largo.\"),\r\n  direccion: z.string().min(5, \"Direcci\u00F3n demasiado corta.\").max(40, \"Direcci\u00F3n demasiado larga.\"),\r\n  telefono: z.string().max(12, \"Direcci\u00F3n demasiado larga.\")\r\n});\r\n\r\nexport type Cliente = Z.infer<typeof ClienteSchema>;\r\n", "export function getElementOrThrow<T extends HTMLElement>(\r\n  id: string,\r\n  ctor: new () => T\r\n): T {\r\n  const el = document.getElementById(id);\r\n  if (!(el instanceof ctor)) {\r\n    throw new Error(`Elemento '${id}' no encontrado o tipo inv\u00E1lido`);\r\n  }\r\n  return el;\r\n}\r\n", "const z = window.Zod;\r\nimport type * as Z from 'zod';\r\nimport type { Cliente } from \"../Models/Clientes.schema\";\r\nimport { ClienteSchema } from \"../Models/Clientes.schema\";\r\nimport { getElementOrThrow } from \"../utils/GetElements\";\r\n/*\r\nEn este caso, .getElementById('clientes-form') devuelve un HTMLFormElement, lo que hace que no se\r\nle pueda asignar directamente a un HTMLFormElement, por eso falta la anotaci\u00F3n del tipo.\r\n*/\r\nconst formularioClientes = getElementOrThrow(\"clientes-form\", HTMLFormElement);\r\nconst outPutElement = getElementOrThrow(\"output\", HTMLParagraphElement);\r\nconst tableBodyElement = getElementOrThrow(\r\n  \"table-clientes__body\",\r\n  HTMLTableSectionElement\r\n);\r\nconst m = document.getElementById(\"m\");\r\nwindow.addEventListener(\"load\", cargarClientes);\r\n\r\nfunction validarDatosServidor(clientes:Array<Object>, schema:Z.ZodSchema):Array<Cliente>{\r\n  \r\n}\r\nasync function cargarClientes(): Promise<void> {\r\n  let serverResponse: Response;\r\n  let bodyResponse:Array<Object>;\r\n  try {\r\n    serverResponse = await fetch(\"api/Clientes\");\r\n    bodyResponse = await deserializarRespuesta(serverResponse);\r\n    let dataValidated = validarDatosServidor(bodyResponse, ClienteSchema);\r\n    if (dataValidated.success) {\r\n      if (Array.isArray(dataValidated)) {\r\n        dataValidated.forEach((cliente) => {\r\n          const tableRow = document.createElement(\"tr\");\r\n\r\n          tableRow.innerHTML = `\r\n            <td>${cliente.Nombre}</td>\r\n            <td>${cliente.Telefono}</td>\r\n            <td>${cliente.Direccion}</td>\r\n          `;\r\n\r\n          tableBodyElement.appendChild(tableRow);\r\n        });\r\n      }\r\n    } else {\r\n      console.log(\"Los datos no pasaron la validaci\u00F3n.\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error al hacer la petici\u00F3n al servidor.\", error);\r\n  }\r\n}\r\nasync function deserializarRespuesta(serverResponse: Response): Promise<any> {\r\n  let bodyResponse;\r\n  try {\r\n    bodyResponse = await serverResponse.json();\r\n  } catch (error) {\r\n    console.error(\"Error al deserializar la respuesta del servidor: \", error);\r\n  }\r\n  return bodyResponse;\r\n}\r\nformularioClientes.addEventListener(\"submit\", async (e) => {\r\n  e.preventDefault();\r\n\r\n  const data = Object.fromEntries(new FormData(formularioClientes).entries());\r\n\r\n  const validar = ClienteSchema.safeParse(data);\r\n\r\n  if (validar.success) {\r\n    const cliente: Cliente = validar.data;\r\n\r\n    let serverResponse = new Response();\r\n    let bodyResponse: Object = {};\r\n\r\n    try {\r\n      serverResponse = await fetch(\"api/Clientes\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(cliente),\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error al hacer fetch:\", error);\r\n    }\r\n    console.log(serverResponse.headers.get(\"Location\"));\r\n    try {\r\n      bodyResponse = await serverResponse.json();\r\n    } catch (error) {\r\n      console.error(\"Error al deserializar la respuesta del servidor:\", error);\r\n    }\r\n    outPutElement.textContent = JSON.stringify(bodyResponse);\r\n    console.log(bodyResponse);\r\n  }\r\n});\r\n"],
  "mappings": ";AACA,IAAM,IAAI,OAAO;AAEV,IAAM,gBAAgB,EAAE,OAAO;AAAA,EACpC,QAAQ,EAAE,OAAO,EAAE,IAAI,GAAG,yBAAyB,EAAE,IAAI,IAAI,yBAAyB;AAAA,EACtF,WAAW,EAAE,OAAO,EAAE,IAAI,GAAG,+BAA4B,EAAE,IAAI,IAAI,+BAA4B;AAAA,EAC/F,UAAU,EAAE,OAAO,EAAE,IAAI,IAAI,+BAA4B;AAC3D,CAAC;;;ACPM,SAAS,kBACd,IACA,MACG;AACH,QAAM,KAAK,SAAS,eAAe,EAAE;AACrC,MAAI,EAAE,cAAc,OAAO;AACzB,UAAM,IAAI,MAAM,aAAa,EAAE,oCAAiC;AAAA,EAClE;AACA,SAAO;AACT;;;ACTA,IAAMA,KAAI,OAAO;AASjB,IAAM,qBAAqB,kBAAkB,iBAAiB,eAAe;AAC7E,IAAM,gBAAgB,kBAAkB,UAAU,oBAAoB;AACtE,IAAM,mBAAmB;AAAA,EACvB;AAAA,EACA;AACF;AACA,IAAM,IAAI,SAAS,eAAe,GAAG;AACrC,OAAO,iBAAiB,QAAQ,cAAc;AAE9C,SAAS,qBAAqB,UAAwB,QAAkC;AAExF;AACA,eAAe,iBAAgC;AAC7C,MAAI;AACJ,MAAI;AACJ,MAAI;AACF,qBAAiB,MAAM,MAAM,cAAc;AAC3C,mBAAe,MAAM,sBAAsB,cAAc;AACzD,QAAI,gBAAgB,qBAAqB,cAAc,aAAa;AACpE,QAAI,cAAc,SAAS;AACzB,UAAI,MAAM,QAAQ,aAAa,GAAG;AAChC,sBAAc,QAAQ,CAAC,YAAY;AACjC,gBAAM,WAAW,SAAS,cAAc,IAAI;AAE5C,mBAAS,YAAY;AAAA,kBACb,QAAQ,MAAM;AAAA,kBACd,QAAQ,QAAQ;AAAA,kBAChB,QAAQ,SAAS;AAAA;AAGzB,2BAAiB,YAAY,QAAQ;AAAA,QACvC,CAAC;AAAA,MACH;AAAA,IACF,OAAO;AACL,cAAQ,IAAI,wCAAqC;AAAA,IACnD;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,8CAA2C,KAAK;AAAA,EAChE;AACF;AACA,eAAe,sBAAsB,gBAAwC;AAC3E,MAAI;AACJ,MAAI;AACF,mBAAe,MAAM,eAAe,KAAK;AAAA,EAC3C,SAAS,OAAO;AACd,YAAQ,MAAM,qDAAqD,KAAK;AAAA,EAC1E;AACA,SAAO;AACT;AACA,mBAAmB,iBAAiB,UAAU,OAAO,MAAM;AACzD,IAAE,eAAe;AAEjB,QAAM,OAAO,OAAO,YAAY,IAAI,SAAS,kBAAkB,EAAE,QAAQ,CAAC;AAE1E,QAAM,UAAU,cAAc,UAAU,IAAI;AAE5C,MAAI,QAAQ,SAAS;AACnB,UAAM,UAAmB,QAAQ;AAEjC,QAAI,iBAAiB,IAAI,SAAS;AAClC,QAAI,eAAuB,CAAC;AAE5B,QAAI;AACF,uBAAiB,MAAM,MAAM,gBAAgB;AAAA,QAC3C,QAAQ;AAAA,QACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,QAC9C,MAAM,KAAK,UAAU,OAAO;AAAA,MAC9B,CAAC;AAAA,IACH,SAAS,OAAO;AACd,cAAQ,MAAM,yBAAyB,KAAK;AAAA,IAC9C;AACA,YAAQ,IAAI,eAAe,QAAQ,IAAI,UAAU,CAAC;AAClD,QAAI;AACF,qBAAe,MAAM,eAAe,KAAK;AAAA,IAC3C,SAAS,OAAO;AACd,cAAQ,MAAM,oDAAoD,KAAK;AAAA,IACzE;AACA,kBAAc,cAAc,KAAK,UAAU,YAAY;AACvD,YAAQ,IAAI,YAAY;AAAA,EAC1B;AACF,CAAC;",
  "names": ["z"]
}
