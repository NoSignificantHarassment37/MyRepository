{
  "version": 3,
  "sources": ["../../../src/Models/Test.schema.ts", "../../../src/utils/GetElements.ts", "../../../src/pages/test.ts"],
  "sourcesContent": ["import type * as Z from 'zod';\r\nconst z = window.Zod;\r\n\r\nexport const testSchema = z.object({\r\n    nombre: z.string('El nombre debe ser una cadena de caracteres.').min(5, 'El nombre debe tener m\u00E1s de 5 caracteres.').max(50, 'El nombre debe tener menos de 50 caracteres.'),\r\n    correo: z.email('El correo electr\u00F3nico no es v\u00E1lido.'),\r\n    edad: z.int('La edad debe ser un n\u00FAmero entero.').min(0, 'La edad debe ser mayor a 0.').max(100, 'La edad debe ser menor a 100.'),\r\n    fechaNacimiento: z.date('La fecha de nacimiento no es v\u00E1lida.')\r\n});\r\n\r\nexport type TestSchema = Z.infer<typeof testSchema>;", "export function getElementOrThrow<T extends HTMLElement>(\r\n  id: string,\r\n  ctor: new () => T\r\n): T {\r\n  const el = document.getElementById(id);\r\n  if (!(el instanceof ctor)) {\r\n    throw new Error(`Elemento '${id}' no encontrado o tipo inv\u00E1lido`);\r\n  }\r\n  return el;\r\n}\r\n", "import type { ZodSafeParseResult } from 'zod';\r\nimport { testSchema, type TestSchema } from '../Models/Test.schema';\r\nimport { getElementOrThrow } from '../utils/GetElements';\r\n\r\nconst output:HTMLParagraphElement = getElementOrThrow('output', HTMLParagraphElement);\r\nconst formularioClientes = getElementOrThrow('clientes-form', HTMLFormElement);\r\n\r\nformularioClientes.addEventListener('submit', async (e) => {\r\n    e.preventDefault();\r\n\r\n    const data:Object = Object.fromEntries(new FormData(formularioClientes).entries()); \r\n\r\n    const convertedToTestSchema:ZodSafeParseResult<TestSchema> = testSchema.safeParse(data);\r\n\r\n    if(convertedToTestSchema.success){\r\n        const response = await fetch('api/Clientes/', {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\":\"application/json\" },\r\n            body: JSON.stringify(convertedToTestSchema)\r\n        })\r\n\r\n        console.log(response.ok);\r\n    }\r\n});"],
  "mappings": ";AACA,IAAM,IAAI,OAAO;AAEV,IAAM,aAAa,EAAE,OAAO;AAAA,EAC/B,QAAQ,EAAE,OAAO,8CAA8C,EAAE,IAAI,GAAG,8CAA2C,EAAE,IAAI,IAAI,8CAA8C;AAAA,EAC3K,QAAQ,EAAE,MAAM,2CAAqC;AAAA,EACrD,MAAM,EAAE,IAAI,uCAAoC,EAAE,IAAI,GAAG,6BAA6B,EAAE,IAAI,KAAK,+BAA+B;AAAA,EAChI,iBAAiB,EAAE,KAAK,yCAAsC;AAClE,CAAC;;;ACRM,SAAS,kBACd,IACA,MACG;AACH,QAAM,KAAK,SAAS,eAAe,EAAE;AACrC,MAAI,EAAE,cAAc,OAAO;AACzB,UAAM,IAAI,MAAM,aAAa,EAAE,oCAAiC;AAAA,EAClE;AACA,SAAO;AACT;;;ACLA,IAAM,SAA8B,kBAAkB,UAAU,oBAAoB;AACpF,IAAM,qBAAqB,kBAAkB,iBAAiB,eAAe;AAE7E,mBAAmB,iBAAiB,UAAU,OAAO,MAAM;AACvD,IAAE,eAAe;AAEjB,QAAM,OAAc,OAAO,YAAY,IAAI,SAAS,kBAAkB,EAAE,QAAQ,CAAC;AAEjF,QAAM,wBAAuD,WAAW,UAAU,IAAI;AAEtF,MAAG,sBAAsB,SAAQ;AAC7B,UAAM,WAAW,MAAM,MAAM,iBAAiB;AAAA,MAC1C,QAAQ;AAAA,MACR,SAAS,EAAE,gBAAe,mBAAmB;AAAA,MAC7C,MAAM,KAAK,UAAU,qBAAqB;AAAA,IAC9C,CAAC;AAED,YAAQ,IAAI,SAAS,EAAE;AAAA,EAC3B;AACJ,CAAC;",
  "names": []
}
