CONCEPTOS CLAVE: 

relacion typescript - javascript : TS y JS son ambos lenguajes de programacion, PERO typescript es una mejora VIRTUAL  

2️⃣ Inicializar npm
npm init -y
Crea un archivo package.json con valores por defecto (-y evita que te haga preguntas).

package.json mantiene la configuración del proyecto, dependencias, scripts, versión, etc.

3️⃣ Instalar TypeScript y ts-node como dependencias de desarrollo
npm install --save-dev typescript ts-node @types/node
typescript: el compilador de TypeScript (tsc) que convierte .ts a .js.

ts-node: permite ejecutar archivos .ts directamente sin compilar manualmente.

@types/node: tipados de TypeScript para Node.js, necesarios para usar módulos y funciones de Node.

--save-dev: estas dependencias solo son para desarrollo, no se incluyen en producción.

4️⃣ Inicializar tsconfig.json
npx tsc --init
Crea un archivo tsconfig.json con opciones predeterminadas.

Este archivo indica al compilador cómo compilar tu proyecto: versión de JS, carpetas de entrada/salida, strict mode, etc.
5️⃣ Instalar ts-node-dev
npm install --save-dev ts-node-dev
Similar a ts-node, pero con recarga automática: si guardas un archivo .ts, el bot reinicia tu programa automáticamente.

Muy útil para desarrollo rápido.
6️⃣ Compilación automática con watch
npx tsc --watch
Observa los archivos .ts dentro del rootDir definido en tsconfig.json.

Pero mejor instalar ts-node.
npm install -D ts-node @types/node 
Importante tener TS con @types/node 

Cada vez que cambias un archivo, lo transpila automáticamente a .js en outDir.

Problema: tienes que ejecutar este comando cada vez que entres a trabajar, y solo compila; no ejecuta tu app.

Aqui hay un bundler para resolver los paths.
npm install -D esbuild 
el build.js es un ejemplo de como usarlo, para transpilar solamente ejecutalo.

Instala expressjs.
npm install express
npm install -D @types/express


instalar esbuild-plugin-alias
npm install -D esbuild-plugin-alias